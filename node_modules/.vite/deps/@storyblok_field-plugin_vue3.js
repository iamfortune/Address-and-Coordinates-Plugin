import {
  X
} from "./chunk-A6LC6SQD.js";
import {
  Fragment,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  inject,
  isProxy,
  isRef,
  openBlock,
  provide,
  reactive,
  renderSlot,
  toRaw,
  unref
} from "./chunk-J6475X5X.js";

// node_modules/@storyblok/field-plugin/dist/vue3/index.js
var E = () => {
  const r = inject(
    "field-plugin",
    () => {
      throw new Error(
        "You need to wrap your app with `<FieldPluginProvider>` component."
      );
    },
    true
  );
  if (r.type !== "loaded")
    throw new Error(
      "The plugin is not loaded, yet `useFieldPlugin()` was invoked. Ensure that the component that invoked `useFieldPlugin()` is wrapped within `<FieldPluginProvider>`, and that it is placed within the default slot."
    );
  return r;
};
function l(r) {
  let e = r;
  return isProxy(e) && (e = toRaw(e)), isRef(e) && (e = unref(e)), F(e) ? Object.keys(e).reduce((n, t) => (n[t] = l(e[t]), n), e) : Array.isArray(e) ? e.map(l) : e;
}
function F(r) {
  return Object.prototype.toString.call(r) === "[object Object]";
}
var O = defineComponent({
  __name: "FieldPluginProvider",
  setup(r) {
    const e = reactive({
      type: "loading"
    }), n = (t, i) => {
      Object.keys(t).forEach((o) => {
        i[o] === void 0 && delete t[o];
      }), Object.assign(t, i);
    };
    return X((t) => {
      t.type === "loaded" && e.type === "loading" && Object.assign(e, {
        type: "loaded",
        data: t.data
      }), t.type === "loaded" && e.type === "loaded" && Object.keys(t.data).forEach((o) => {
        typeof e.data[o] == "object" ? n(
          e.data[o],
          t.data[o]
        ) : e.data[o] = t.data[o];
      }), t.actions ? e.actions = {
        ...t.actions,
        setContent: (i) => {
          t.actions.setContent(l(i));
        }
      } : e.actions = void 0, e.type = t.type, e.error = t.error;
    }), provide("field-plugin", e), (t, i) => (openBlock(), createElementBlock(Fragment, null, [
      e.type === "loading" ? renderSlot(t.$slots, "loading", { key: 0 }) : createCommentVNode("", true),
      e.type === "error" ? renderSlot(t.$slots, "error", { key: 1 }) : createCommentVNode("", true),
      e.type === "loaded" ? renderSlot(t.$slots, "default", { key: 2 }) : createCommentVNode("", true)
    ], 64));
  }
});
export {
  O as FieldPluginProvider,
  E as useFieldPlugin
};
//# sourceMappingURL=@storyblok_field-plugin_vue3.js.map
