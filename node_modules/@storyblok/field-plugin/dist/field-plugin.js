const i = (e, t) => typeof e == "object" && e !== null && t in e, y = (e) => i(e, "name") && typeof e.name == "string" && i(e, "value") && typeof e.value == "string", v = (e) => i(e, "field_type") && typeof e.field_type == "string" && i(e, "options") && Array.isArray(e.options) && e.options.every(y), l = (e) => i(e, "action") && typeof e.action == "string" && i(e, "uid") && typeof e.uid == "string", f = (e) => i(e, "content") && typeof e.content == "object" && e.content !== null && !Array.isArray(e.content), m = (e) => l(e) && i(e, "language") && typeof e.language == "string" && e.action === "loaded" && i(e, "schema") && v(e.schema) && i(e, "story") && f(e.story), w = (e) => e.reduce((t, s) => (t[s.name] = s.value, t), {}), M = (e) => i(e, "filename") && typeof e.filename == "string", C = (e) => {
  const { uid: t, action: s, field: n, ...r } = e;
  return r;
}, S = (e) => l(e) && e.action === "asset-selected" && P(e) && M(e), P = (e) => !i(e, "field") || typeof e.field > "u" ? !0 : typeof e.field == "string", A = (e) => l(e) && e.action === "get-context" && i(e, "story") && f(e.story), a = (e) => i(e, "action") && e.action === "plugin-changed" && i(e, "uid") && typeof e.uid == "string" && i(e, "event") && typeof e.event == "string", J = (e) => a(e) && e.event === "update" && i(e, "model"), x = (e, t) => ({
  action: "plugin-changed",
  event: "update",
  uid: e,
  model: t
}), K = (e) => a(e) && e.event === "toggleModal" && i(e, "status") && typeof e.status == "boolean", F = (e, t) => ({
  action: "plugin-changed",
  event: "toggleModal",
  uid: e,
  status: t
}), N = (e) => a(e) && e.event === "loaded", L = (e) => ({
  action: "plugin-changed",
  event: "loaded",
  uid: e
}), Q = (e) => a(e) && e.event === "heightChange" && i(e, "height") && typeof e.height == "number", R = (e, t) => ({
  action: "plugin-changed",
  event: "heightChange",
  uid: e,
  height: t
}), T = (e) => a(e) && e.event === "getContext", k = (e) => ({
  action: "plugin-changed",
  event: "getContext",
  uid: e
}), V = (e) => a(e) && e.event === "showAssetModal" && E(e), E = (e) => !i(e, "field") || typeof e.field > "u" ? !0 : typeof e.field == "string", O = (e, t) => ({
  action: "plugin-changed",
  event: "showAssetModal",
  uid: e,
  field: t
}), Y = (e) => `${e.secure ? "https" : "http"}://${e.host}`, $ = (e) => {
  const t = new URLSearchParams(e), s = t.get("uid") ?? void 0, n = t.get("protocol") ?? void 0, r = t.get("host") ?? void 0, d = t.get("preview") ?? void 0;
  return n !== "http:" && n !== "https:" || typeof s > "u" || typeof r > "u" ? void 0 : {
    uid: s,
    secure: n === "https:",
    host: r,
    preview: typeof d < "u"
  };
}, W = (e) => {
  const t = new URLSearchParams({
    protocol: e.secure ? "https:" : "http:",
    host: e.host,
    uid: e.uid
  });
  return e.preview && t.set("preview", "1"), t.toString();
}, q = (e) => ({
  spaceId: e.spaceId ?? void 0,
  story: e.story ?? void 0,
  storyId: e.storyId ?? void 0,
  storyLang: e.language === "" ? "default" : e.language,
  blockUid: e.blockId ?? void 0,
  token: e.token ?? void 0,
  options: w(e.schema.options),
  uid: e.uid ?? void 0,
  content: e.model ?? void 0
}), I = (e) => ({
  story: e.story ?? void 0
}), b = {
  isModalOpen: !1,
  content: void 0,
  options: {},
  storyLang: "default",
  story: { content: {} },
  blockUid: void 0,
  storyId: void 0,
  token: void 0,
  uid: "-preview",
  spaceId: void 0
}, U = (e, t, s) => {
  let n = b, r;
  return {
    actions: {
      setContent: (o) => {
        const c = (
          // This is not safe: if the user pass a function to setContent(),
          //  this code assumes that it is an updater function
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          typeof o == "function" ? o(n.content) : o
        );
        t(x(e, c)), n = {
          ...n,
          content: c
        }, s(n);
      },
      setModalOpen: (o) => {
        const c = typeof o == "function" ? o(n.isModalOpen) : o;
        t(F(e, c)), n = {
          ...n,
          isModalOpen: c
        }, s(n);
      },
      selectAsset: () => new Promise((o) => {
        r = o, t(O(e));
      }),
      requestContext: () => t(k(e))
    },
    messageCallbacks: {
      onStateChange: (o) => {
        n = {
          ...n,
          ...q(o)
        }, s(n);
      },
      onContextRequest: (o) => {
        n = {
          ...n,
          ...I(o)
        }, s(n);
      },
      onAssetSelect: (o) => {
        r == null || r(C(o));
      },
      onUnknownMessage: (o) => {
        console.debug(
          `Plugin received a message from container of an unknown action type "${o.action}". You may need to upgrade the version of the @storyblok/field-plugin library. Full message: ${JSON.stringify(
            o
          )}`
        );
      }
    }
  };
}, _ = (e, t) => {
  const s = () => {
    t(R(e, document.body.clientHeight));
  }, n = new ResizeObserver(s);
  return n.observe(document.body), () => {
    n.disconnect();
  };
}, z = () => {
  const e = document == null ? void 0 : document.querySelector(
    'link[href^="https://plugins.storyblok.com"]'
  );
  return e == null || e.setAttribute("disabled", ""), () => {
    e == null || e.removeAttribute("disabled");
  };
}, D = (e, t, s) => {
  l(e) && e.uid === t && (m(e) ? s.onStateChange(e) : A(e) ? s.onContextRequest(e) : S(e) ? s.onAssetSelect(e) : s.onUnknownMessage(e));
}, H = (e, t) => {
  const s = (n) => {
    D(n.data, e, t);
  };
  return window.addEventListener("message", s, !1), () => {
    window.removeEventListener("message", s, !1);
  };
}, B = "https://plugin-sandbox.storyblok.com/field-plugin/", G = () => {
  const e = new URLSearchParams({
    url: window.location.href
  }).toString();
  return `${B}?${e}`;
}, X = (e) => {
  if (!(window.parent !== window))
    return e({
      type: "error",
      error: new Error(
        `The window is not embedded within another window. Did you mean to open the field plugin in the sandbox? ${G()}`
      )
    }), () => {
    };
  const s = $(window.location.search);
  if (!s)
    return e({
      type: "error",
      error: new Error(
        "The URL parameters does not match the expected format."
      )
    }), () => {
    };
  const { uid: n } = s, r = (o) => {
    const c = "*";
    window.parent.postMessage(o, c);
  }, d = _(n, r), g = z(), { actions: u, messageCallbacks: h } = U(
    n,
    r,
    (o) => {
      e({
        type: "loaded",
        data: o,
        actions: u
      });
    }
  );
  r(L(n));
  const p = H(
    s.uid,
    h
  );
  return () => {
    p(), d(), g();
  };
};
export {
  C as assetFromAssetSelectedMessage,
  O as assetModalChangeMessage,
  X as createFieldPlugin,
  k as getContextMessage,
  P as hasField,
  R as heightChangeMessage,
  M as isAsset,
  V as isAssetModalChangeMessage,
  S as isAssetSelectedMessage,
  A as isContextRequestMessage,
  y as isFieldPluginOption,
  v as isFieldPluginSchema,
  T as isGetContextMessage,
  Q as isHeightChangeMessage,
  a as isMessageToContainer,
  l as isMessageToPlugin,
  K as isModalChangeMessage,
  N as isPluginLoadedMessage,
  m as isStateChangedMessage,
  f as isStoryData,
  J as isValueChangeMessage,
  F as modalChangeMessage,
  Y as originFromPluginParams,
  L as pluginLoadedMessage,
  $ as pluginUrlParamsFromUrl,
  w as recordFromFieldPluginOptions,
  W as urlSearchParamsFromPluginUrlParams,
  x as valueChangeMessage
};
