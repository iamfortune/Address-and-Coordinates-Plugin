import { createFieldPlugin as g } from "@storyblok/field-plugin";
import s from "vue";
function m(n, r, _, p, a, l, d, v) {
  var e = typeof n == "function" ? n.options : n;
  r && (e.render = r, e.staticRenderFns = _, e._compiled = !0), p && (e.functional = !0), l && (e._scopeId = "data-v-" + l);
  var i;
  if (d ? (i = function(o) {
    o = o || // cached call
    this.$vnode && this.$vnode.ssrContext || // stateful
    this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext, !o && typeof __VUE_SSR_CONTEXT__ < "u" && (o = __VUE_SSR_CONTEXT__), a && a.call(this, o), o && o._registeredComponents && o._registeredComponents.add(d);
  }, e._ssrRegister = i) : a && (i = v ? function() {
    a.call(
      this,
      (e.functional ? this.parent : this).$root.$options.shadowRoot
    );
  } : a), i)
    if (e.functional) {
      e._injectStyles = i;
      var c = e.render;
      e.render = function(h, u) {
        return i.call(u), c(h, u);
      };
    } else {
      var f = e.beforeCreate;
      e.beforeCreate = f ? [].concat(f, i) : [i];
    }
  return {
    exports: n,
    options: e
  };
}
const t = s.observable({
  type: "loading"
});
g((n) => {
  s.set(t, "type", n.type), s.set(t, "error", n.error), s.set(t, "data", n.data), s.set(t, "actions", n.actions);
});
const C = {
  provide: {
    plugin: t
  },
  data() {
    return { plugin: t };
  }
};
var y = function() {
  var r = this, _ = r._self._c;
  return _("div", { staticClass: "field-plugin-provider" }, [r.plugin.type === "loading" ? r._t("loading") : r._e(), r.plugin.type === "error" ? r._t("error") : r._e(), r.plugin.type === "loaded" ? r._t("default") : r._e()], 2);
}, R = [], $ = /* @__PURE__ */ m(
  C,
  y,
  R,
  !1,
  null,
  null,
  null,
  null
);
const T = $.exports;
export {
  T as FieldPluginProvider
};
