import { inject as s, isProxy as u, toRaw as p, isRef as c, unref as f, defineComponent as g, reactive as y, provide as h, openBlock as m, createElementBlock as P, Fragment as v, renderSlot as d, createCommentVNode as a } from "vue";
import { createFieldPlugin as j } from "@storyblok/field-plugin";
const E = () => {
  const r = s(
    "field-plugin",
    () => {
      throw new Error(
        "You need to wrap your app with `<FieldPluginProvider>` component."
      );
    },
    !0
  );
  if (r.type !== "loaded")
    throw new Error(
      "The plugin is not loaded, yet `useFieldPlugin()` was invoked. Ensure that the component that invoked `useFieldPlugin()` is wrapped within `<FieldPluginProvider>`, and that it is placed within the default slot."
    );
  return r;
};
function l(r) {
  let e = r;
  return u(e) && (e = p(e)), c(e) && (e = f(e)), F(e) ? Object.keys(e).reduce((n, t) => (n[t] = l(e[t]), n), e) : Array.isArray(e) ? e.map(l) : e;
}
function F(r) {
  return Object.prototype.toString.call(r) === "[object Object]";
}
const O = /* @__PURE__ */ g({
  __name: "FieldPluginProvider",
  setup(r) {
    const e = y({
      type: "loading"
    }), n = (t, i) => {
      Object.keys(t).forEach((o) => {
        i[o] === void 0 && delete t[o];
      }), Object.assign(t, i);
    };
    return j((t) => {
      t.type === "loaded" && e.type === "loading" && Object.assign(e, {
        type: "loaded",
        data: t.data
      }), t.type === "loaded" && e.type === "loaded" && Object.keys(t.data).forEach((o) => {
        typeof e.data[o] == "object" ? n(
          e.data[o],
          t.data[o]
        ) : e.data[o] = t.data[o];
      }), t.actions ? e.actions = {
        ...t.actions,
        setContent: (i) => {
          t.actions.setContent(l(i));
        }
      } : e.actions = void 0, e.type = t.type, e.error = t.error;
    }), h("field-plugin", e), (t, i) => (m(), P(v, null, [
      e.type === "loading" ? d(t.$slots, "loading", { key: 0 }) : a("", !0),
      e.type === "error" ? d(t.$slots, "error", { key: 1 }) : a("", !0),
      e.type === "loaded" ? d(t.$slots, "default", { key: 2 }) : a("", !0)
    ], 64));
  }
});
export {
  O as FieldPluginProvider,
  E as useFieldPlugin
};
