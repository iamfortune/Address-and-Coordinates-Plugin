"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildOutputChunkWithCssInjectionCode = exports.globalCssInjection = exports.relativeCssInjection = exports.getJsTargetBundleKeys = exports.buildJsCssMap = exports.concatCssAndDeleteFromBundle = exports.extractCss = exports.debugLog = exports.warnLog = exports.removeLinkStyleSheets = exports.buildCSSInjectionCode = void 0;
const vite_1 = require("vite");
const cssInjectedByJsId = '\0vite/all-css';
const defaultInjectCode = (cssCode, { styleId, useStrictCSP }) => `try{if(typeof document != 'undefined'){var elementStyle = document.createElement('style');${typeof styleId == 'string' && styleId.length > 0 ? `elementStyle.id = '${styleId}';` : ''}${useStrictCSP ? `elementStyle.nonce = document.head.querySelector('meta[property=csp-nonce]')?.content;` : ''}elementStyle.appendChild(document.createTextNode(${cssCode}));document.head.appendChild(elementStyle);}}catch(e){console.error('vite-plugin-css-injected-by-js', e);}`;
function buildCSSInjectionCode({ cssToInject, styleId, injectCode, injectCodeFunction, useStrictCSP, buildOptions, }) {
    return __awaiter(this, void 0, void 0, function* () {
        let { minify, target } = buildOptions;
        const res = yield (0, vite_1.build)({
            root: '',
            configFile: false,
            logLevel: 'error',
            plugins: [injectionCSSCodePlugin({ cssToInject, styleId, injectCode, injectCodeFunction, useStrictCSP })],
            build: {
                write: false,
                target,
                minify,
                assetsDir: '',
                rollupOptions: {
                    input: {
                        ['all-css']: cssInjectedByJsId,
                    },
                    output: {
                        format: 'iife',
                        manualChunks: undefined,
                    },
                },
            },
        });
        const _cssChunk = Array.isArray(res) ? res[0] : res;
        if (!('output' in _cssChunk))
            return null;
        return _cssChunk.output[0];
    });
}
exports.buildCSSInjectionCode = buildCSSInjectionCode;
function injectionCSSCodePlugin({ cssToInject, injectCode, injectCodeFunction, styleId, useStrictCSP, }) {
    return {
        name: 'vite:injection-css-code-plugin',
        resolveId(id) {
            if (id == cssInjectedByJsId) {
                return id;
            }
        },
        load(id) {
            if (id == cssInjectedByJsId) {
                const cssCode = JSON.stringify(cssToInject.trim());
                if (injectCodeFunction) {
                    return `(${injectCodeFunction})(${cssCode}, ${JSON.stringify({ styleId, useStrictCSP })})`;
                }
                const injectFunction = injectCode || defaultInjectCode;
                return injectFunction(cssCode, { styleId, useStrictCSP });
            }
        },
    };
}
function removeLinkStyleSheets(html, cssFileName) {
    const removeCSS = new RegExp(`<link rel=".*"[^>]*?href=".*/?${cssFileName}"[^>]*?>`);
    return html.replace(removeCSS, '');
}
exports.removeLinkStyleSheets = removeLinkStyleSheets;
/* istanbul ignore next -- @preserve */
function warnLog(msg) {
    console.warn(`\x1b[33m \n${msg} \x1b[39m`);
}
exports.warnLog = warnLog;
/* istanbul ignore next -- @preserve */
function debugLog(msg) {
    console.debug(`\x1b[34m \n${msg} \x1b[39m`);
}
exports.debugLog = debugLog;
function isJsOutputChunk(chunk) {
    return chunk.type == 'chunk' && chunk.fileName.match(/.[cm]?js$/) != null;
}
function defaultJsAssetsFilter(chunk) {
    return chunk.isEntry && !chunk.fileName.includes('polyfill');
}
// The cache must be global since execution context is different every entry
const cssSourceCache = {};
function extractCss(bundle, cssName) {
    var _a;
    const cssAsset = bundle[cssName];
    if (cssAsset !== undefined && cssAsset.source) {
        const cssSource = cssAsset.source;
        // We treat these as strings and coerce them implicitly to strings, explicitly handle conversion
        cssSourceCache[cssName] =
            cssSource instanceof Uint8Array ? new TextDecoder().decode(cssSource) : `${cssSource}`;
    }
    return (_a = cssSourceCache[cssName]) !== null && _a !== void 0 ? _a : '';
}
exports.extractCss = extractCss;
function concatCssAndDeleteFromBundle(bundle, cssAssets) {
    return cssAssets.reduce(function extractCssAndDeleteFromBundle(previous, cssName) {
        const cssSource = extractCss(bundle, cssName);
        delete bundle[cssName];
        return previous + cssSource;
    }, '');
}
exports.concatCssAndDeleteFromBundle = concatCssAndDeleteFromBundle;
function buildJsCssMap(bundle, jsAssetsFilterFunction) {
    const chunksWithCss = {};
    const bundleKeys = getJsTargetBundleKeys(bundle, typeof jsAssetsFilterFunction == 'function' ? jsAssetsFilterFunction : () => true);
    if (bundleKeys.length === 0) {
        throw new Error('Unable to locate the JavaScript asset for adding the CSS injection code. It is recommended to review your configurations.');
    }
    for (const key of bundleKeys) {
        const chunk = bundle[key];
        if (chunk.type === 'asset' || !chunk.viteMetadata || chunk.viteMetadata.importedCss.size === 0) {
            continue;
        }
        const chunkStyles = chunksWithCss[key] || [];
        chunkStyles.push(...chunk.viteMetadata.importedCss.values());
        chunksWithCss[key] = chunkStyles;
    }
    return chunksWithCss;
}
exports.buildJsCssMap = buildJsCssMap;
function getJsTargetBundleKeys(bundle, jsAssetsFilterFunction) {
    if (typeof jsAssetsFilterFunction != 'function') {
        const jsAssets = Object.keys(bundle).filter((i) => {
            const asset = bundle[i];
            return isJsOutputChunk(asset) && defaultJsAssetsFilter(asset);
        });
        if (jsAssets.length == 0) {
            return [];
        }
        const jsTargetFileName = jsAssets[jsAssets.length - 1];
        if (jsAssets.length > 1) {
            warnLog(`[vite-plugin-css-injected-by-js] has identified "${jsTargetFileName}" as one of the multiple output files marked as "entry" to put the CSS injection code.` +
                'However, if this is not the intended file to add the CSS injection code, you can use the "jsAssetsFilterFunction" parameter to specify the desired output file (read docs).');
            if (process.env.VITE_CSS_INJECTED_BY_JS_DEBUG) {
                const jsAssetsStr = jsAssets.join(', ');
                debugLog(`[vite-plugin-css-injected-by-js] identified js file targets: ${jsAssetsStr}. Selected "${jsTargetFileName}".\n`);
            }
        }
        // This should be always the root of the application
        return [jsTargetFileName];
    }
    const chunkFilter = ([_key, chunk]) => isJsOutputChunk(chunk) && jsAssetsFilterFunction(chunk);
    return Object.entries(bundle)
        .filter(chunkFilter)
        .map(function extractAssetKeyFromBundleEntry([key]) {
        return key;
    });
}
exports.getJsTargetBundleKeys = getJsTargetBundleKeys;
function relativeCssInjection(bundle, assetsWithCss, buildCssCode, topExecutionPriorityFlag) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        for (const [jsAssetName, cssAssets] of Object.entries(assetsWithCss)) {
            process.env.VITE_CSS_INJECTED_BY_JS_DEBUG &&
                debugLog(`[vite-plugin-css-injected-by-js] Relative CSS: ${jsAssetName}: [ ${cssAssets.join(',')} ]`);
            const assetCss = concatCssAndDeleteFromBundle(bundle, cssAssets);
            const cssInjectionCode = assetCss.length > 0 ? (_a = (yield buildCssCode(assetCss))) === null || _a === void 0 ? void 0 : _a.code : '';
            // We have already filtered these chunks to be RenderedChunks
            const jsAsset = bundle[jsAssetName];
            jsAsset.code = buildOutputChunkWithCssInjectionCode(jsAsset.code, cssInjectionCode !== null && cssInjectionCode !== void 0 ? cssInjectionCode : '', topExecutionPriorityFlag);
        }
    });
}
exports.relativeCssInjection = relativeCssInjection;
// Globally so we can add it to legacy and non-legacy bundle.
let globalCssToInject = '';
function globalCssInjection(bundle, cssAssets, buildCssCode, jsAssetsFilterFunction, topExecutionPriorityFlag) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const jsTargetBundleKeys = getJsTargetBundleKeys(bundle, jsAssetsFilterFunction);
        if (jsTargetBundleKeys.length == 0) {
            throw new Error('Unable to locate the JavaScript asset for adding the CSS injection code. It is recommended to review your configurations.');
        }
        process.env.VITE_CSS_INJECTED_BY_JS_DEBUG &&
            debugLog(`[vite-plugin-css-injected-by-js] Global CSS Assets: [${cssAssets.join(',')}]`);
        const allCssCode = concatCssAndDeleteFromBundle(bundle, cssAssets);
        if (allCssCode.length > 0) {
            globalCssToInject = allCssCode;
        }
        const globalCssInjectionCode = globalCssToInject.length > 0 ? (_a = (yield buildCssCode(globalCssToInject))) === null || _a === void 0 ? void 0 : _a.code : '';
        for (const jsTargetKey of jsTargetBundleKeys) {
            const jsAsset = bundle[jsTargetKey];
            process.env.VITE_CSS_INJECTED_BY_JS_DEBUG &&
                debugLog(`[vite-plugin-css-injected-by-js] Global CSS inject: ${jsAsset.fileName}`);
            jsAsset.code = buildOutputChunkWithCssInjectionCode(jsAsset.code, globalCssInjectionCode !== null && globalCssInjectionCode !== void 0 ? globalCssInjectionCode : '', topExecutionPriorityFlag);
        }
    });
}
exports.globalCssInjection = globalCssInjection;
function buildOutputChunkWithCssInjectionCode(jsAssetCode, cssInjectionCode, topExecutionPriorityFlag) {
    const appCode = jsAssetCode.replace(/\/\*.*empty css.*\*\//, '');
    jsAssetCode = topExecutionPriorityFlag ? '' : appCode;
    jsAssetCode += cssInjectionCode;
    jsAssetCode += !topExecutionPriorityFlag ? '' : appCode;
    return jsAssetCode;
}
exports.buildOutputChunkWithCssInjectionCode = buildOutputChunkWithCssInjectionCode;
